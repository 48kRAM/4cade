;license:MIT
;(c) 2018 by 4am
;
; Search Mode - incrementally search game catalog
;
; Public functions
; - SearchMode
;

; indices into InputDispatchTable
kInputSearch   = 0
kInputClear    = 1
kInputBack     = 2
kInputLaunch   = 3

InputDispatchTable
         !word OnSearch
         !word OnClear
         !word OnBack
         !word OnLaunch

SearchMode
         jsr   Home

         lda   #0
         sta   OffscreenPage
         sta   InputLength

         jsr   OnInputChanged        ; draw default UI on HGR page 1
         bit   $C052
         bit   $C057
         bit   $C050
         bit   $C010
InputLoop
-        lda   $C000
         bpl   -
         bit   $C010
         and   #$7F

         cmp   #$7F                  ; delete key
         bne   +
-        ldx   #kInputBack
         bne   InputDispatch         ; always branches

+        cmp   #$08                  ; left arrow = delete
         beq   -

         cmp   #$1B                  ; Esc clears the input buffer
         bne   +
         ldx   #kInputClear
         bne   InputDispatch         ; always branches

         cmp   #$0D                  ; ENTER launches the current game (if any)
         bne   +
         ldx   #kInputLaunch
         bne   InputDispatch         ; always branches
+
         cmp   #$30                  ; control keys and punctuation ignored
         bcc   @badkey
         cmp   #$3A                  ; numbers are good input
         bcc   @goodkey
         cmp   #$41                  ; more punctuation (also ignored)
         bcc   @badkey
         cmp   #$5B                  ; uppercase letters are good input
         bcs   +
         ora   #$20                  ; convert uppercase letters to lowercase
         bne   @goodkey              ; always branches

+        cmp   #$61                  ; more punctuation (also ignored)
         bcc   @badkey
         cmp   #$7B                  ; lowercase letters are good input
         bcc   @goodkey
         ; execution falls through here
@badkey
         jsr   SoftBell              ; beep on invalid input
         jmp   InputLoop             ; and start over

@goodkey
         ldx   #kInputSearch
         ; execution falls through here
InputDispatch
         pha                         ; save key pressed
         txa
         asl
         tax
         lda   InputDispatchTable,x
         sta   @j+1
         lda   InputDispatchTable+1,x
         sta   @j+2
         pla                         ; restore key pressed
@j       jsr   $FDFD                 ; SMC
         jmp   InputLoop

OnClear
         ldx   InputLength
         bne   +
         jsr   SoftBell
         rts
+        ldx   #0
         stx   InputLength
         jmp   OnInputChanged

OnBack
         ldx   InputLength
         bne   +
         jsr   SoftBell
         rts
+        dec   InputLength
         jmp   OnInputChanged

OnLaunch
         ; TODO
         rts

OnSearch
         ldx   InputLength
         cpx   #MaxInputLength
         bne   +
         jsr   SoftBell
         rts
+        sta   InputBuffer,x
         inc   InputLength
         ; execution falls through here

OnInputChanged
         lda   InputLength
         bne   @findMatchingTitle
                                     ; no input, reset params and UI
         lda   #$FF
         sta   SelectedIndex         ; no game selected
         ldx   #40                   ; reset visible line
         lda   #0
-        sta   UILine1-1,x
         dex
         bne   -
         ldy   #MaxInputLength       ; clear visible search bar
         lda   #" "
-        sta   UILine2+1,y
         dey
         bne   -
         lda   #$7F
         sta   UILine2+1

         lda   OffscreenPage
         beq   +
         lda   #$40
         +HIDE_NEXT_2_BYTES
+        lda   #$20
         sta   @coveraddress+1
         +LDADDR Cover
         jsr   SetPath
         jsr   LoadFileAt            ; load default background
@coveraddress
         !word $FD00
         jsr   _DrawSearchBarOffscreen
         jmp   _ShowOtherPage

@findMatchingTitle
         jsr   ResetTextRank

         jsr   okvs_iter_values      ; iterate through all game titles
         !word gGamesListStore       ; and rank them for the best match
         !word TextRankCallback      ; to the current input buffer

         lda   MatchCount            ; any matches at all?
         bne   +
         jsr   SoftBell              ; no matches for this input buffer, beep
         dec   InputLength           ; and ignore the last key typed
         rts
+
         lda   BestMatchIndex        ; check if the new best match is the same
         cmp   SelectedIndex         ; as the current best match
         php                         ; (we'll use this later to skip reloading)

         sta   SelectedIndex
         sta   @index
         jsr   okvs_nth
         !word gGamesListStore
@index   !byte $FD
         +STAY @key

         plp
         bne   +
         lda   OffscreenPage
         eor   #$01
         sta   OffscreenPage
         jmp   @skipload
+
         lda   OffscreenPage         ; we have a new best match, so load the
         beq   +                     ; new title screenshot (offscreen)
         lda   #$40
         +HIDE_NEXT_2_BYTES
+        lda   #$20
         sta   @titleaddress+1
         +LDADDR kHGRTitleDirectory
         jsr   SetPath
         +LDADDR kPathSeparator
         jsr   AddToPath
         +LDAY @key
         jsr   AddToPath
         jsr   LoadFileAt
@titleaddress
         !word $FD00

@skipload
         jsr   okvs_get
         !word gGamesListStore
@key     !word $FDFD
         +STAY SRC                   ; A/Y points to game title (in OKVS)
         ldy   #0                    ; copy game title into search bar buffer
         lda   (SRC),y
         sta   SAVE                  ; game title length
         inc   SAVE
-        iny
         cpy   SAVE
         bcc   +
         lda   #" "
         +HIDE_NEXT_2_BYTES
+        lda   (SRC),y               ; copy game title to search UI
         sta   UILine2,y
         cpy   #MaxInputLength+1
         bcc   -

         ldx   #40
         lda   #0
-        sta   UILine1-1,x           ; reset search bar
         dex
         bne   -
         tay
-        lda   (SRC),y
         +LOW_ASCII_TO_LOWER
         cmp   InputBuffer,x
         bne   +
         lda   #$0B                  ; add dots to highlight matched characters
         sta   UILine1,y
         inx
         cpx   InputLength
         beq   @doneHighlight
+        inc   HTAB
         iny
         cpy   #40
         bne   -
@doneHighlight
         jsr   _DrawSearchBarOffscreen; actually draw the search UI (offscreen)
         jmp   _ShowOtherPage        ; now show everything at once

_DrawSearchBarOffscreen
         lda   #22                   ; draw visible search bar
         sta   VTAB
         lda   OffscreenPage
         ror                         ; draw on offscreen page
         +LDADDR UILine1
         jsr   Draw40Chars
         lda   OffscreenPage
         ror                         ; draw on offscreen page
         +LDADDR UILine2
         jmp   Draw40Chars

_ShowOtherPage
         lda   OffscreenPage
         eor   #$01
         sta   OffscreenPage
         bne   +
         bit   $C055                 ; show page 2
         rts
+        bit   $C054                 ; show page 1
         rts

;------------------------------------------------------------------------------

Cover    !byte 5
         !text "COVER"

UILine1
         !byte 0,0,0,0,0,0,0,0,0,0
         !byte 0,0,0,0,0,0,0,0,0,0
         !byte 0,0,0,0,0,0,0,0,0,0
         !byte 0,0,0,0,0,0,0,0,0,0

UILine2
         !text "["
         !byte $7F
         !text "                         "
         !text "]   000 games"

OffscreenPage
         !byte 1                     ; 0 = currently showing HGR page 2
                                     ;     (so offscreen is page 1 @ $2000)
                                     ; 1 = currently showing HGR page 1
                                     ;     (so offscreen is page 2 @ $4000)
