;license:MIT
;(c) 2018-9 by 4am
;
; HGR title and action slideshows
;
; Public functions
; - HGRTitleSlideshow
; - HGRActionSlideshow
; - HGRSingle
;

!zone {

HGRTitleSlideshow
         jsr   .LoadHGRTransition    ; load transition effect code at $6000
         jsr   okvs_iter             ; cycle through all listed HGR files
         !word gSlideshowStore
         !word .HGRTitleCallback     ; address of callback (called on each file)
         rts                         ; exit with last picture still visible

HGRActionSlideshow
         jsr   .LoadHGRTransition    ; load transition effect code at $6000
         jsr   okvs_iter             ; cycle through all listed HGR files
         !word gSlideshowStore
         !word .HGRActionCallback    ; address of callback (called on each file)
         rts                         ; exit with last picture still visible

HGRSingle
         jsr   SetPath
         jsr   LoadFile              ; load HGR screenshot at $4000
         jsr   .LoadHGRTransition    ; load transition effect code at $6000
         +LDADDR $6000
         jmp   ExecuteTransitionAndWait

;------------------------------------------------------------------------------
; .HGRTitleCallback [private]
; callback called by okvs_iter on gSlideshowStore
; to load and display a single HGR title screenshot

; in:    A/Y contains address of filename (name only, path is always /TITLE.HGR/)
;        X contains 0-based index of the current record in gSlideshowStore
; out:   all registers and flags clobbered
;        $0800..$1EFF preserved (this contains the gSlideshowStore OKVS data)
;        $2000..$BFFF clobbered by graphics data and transition code
;------------------------------------------------------------------------------
.HGRTitleCallback
         +STAY SAVE

         lda   KBD
         bpl   +
@exit    rts
+
         stx   gCurrentlyVisibleSlideshowIndex

         ; check if game exists in the catalog (it might not if it requires a
         ; joystick and the machine doesn't have one, or if it requires 128K
         ; but the machine only has 64K)
         +LDAY SAVE
         jsr   GetGameDisplayName
         bcs   @exit                 ; not found, so just skip this title

         ; load HGR screenshot at $4000
         +LOAD_FILE kHGRTitleDirectory, SAVE

         +LDADDR $6000
         jmp   ExecuteTransitionAndWait

;------------------------------------------------------------------------------
; .HGRActionCallback [private]
; callback called by okvs_iter on gSlideshowStore
; to load and display a single HGR action screenshot

; in:    A/Y contains address of filename (name only, path is always /ACTION.HGR/)
;        X contains 0-based index of the current record in gSlideshowStore
;        gGamesListStore must be initialized
; out:   all registers and flags clobbered
;        $0800..$1EFF preserved (this contains the gSlideshowStore OKVS data)
;        $2000..$BFFF clobbered by graphics data and transition code
;------------------------------------------------------------------------------
.HGRActionCallback
         +STAY SAVE
         +STAY @slideshowKey

         lda   KBD
         bpl   +
@actionExit
         rts
+
         stx   gCurrentlyVisibleSlideshowIndex

         ; load HGR screenshot at $4000
         +LOAD_FILE kHGRActionDirectory, SAVE

; try to get the human-readable name of this game from gGamesListStore
; and display it in the bottom-left corner
         +LDAY SAVE
         jsr   GetGameDisplayName
         bcc   @foundname
; if the key is not found, try getting the value of the current record from
; gSlideshowStore and using that instead
; (some games have multiple action screenshots, in which case the filename of
; the action screenshot is not the game name, but the value is)
         jsr   okvs_get
         !word gSlideshowStore
@slideshowKey
         !word $FDFD                 ; SMC
         +STAY @key3
         jsr   okvs_get
         !word gGamesListStore
@key3    !word $FDFD                 ; SMC
         bcs   @actionExit           ; game still not found, bail
                                     ; (could happen if game can't be played
                                     ; due to memory or joystick requirements)
@foundname
         +STAY SAVE
@drawname
         ldx   #0
         stx   HTAB
         ldx   #22
         stx   VTAB
         ldy   #0
         lda   (SAVE),y
         tax
         +LDADDR @topline
         sec
         jsr   DrawBuffer
         ldx   #3
         +LDADDR @toprightcorner
         sec
         jsr   DrawBuffer
         inc   VTAB
         ldx   #0
         stx   HTAB
         inx
         +LDADDR @rightline
         sec
         jsr   DrawBuffer
         +LDAY SAVE
         jsr   SetPath
         +LDADDR gPathname
         sec
         jsr   DrawString
         ldx   #2
         +LDADDR @rightline
         sec
         jsr   DrawBuffer

         +LDADDR $6000
         jmp   ExecuteTransitionAndWait
@topline
         !byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         !byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
@toprightcorner
         !byte 0,0,7
@rightline
         !text " "
         !byte 3

;------------------------------------------------------------------------------
; .LoadHGRTransition [private]
; looks up name of next HGR transition effect in FX.CONF and loads that file
; at $6000

; in:    gGlobalPrefsStore has been initialized
; out:   all registers and flags clobbered
;        $6000..$BFFF contains transition effect code
;------------------------------------------------------------------------------
.LoadHGRTransition
         +LDADDR kFXConfFile
         jsr   SetPath
         jsr   LoadFile              ; load HGR transition effects list into $8000
         jsr   ParseKeyValueList     ; parse HGR transition effects list into $6000
         !word gFXStore
         !word ldrlo2                ; (ldrlo2) points to last load address
         !byte 0

         jsr   okvs_get              ; get next HGR transition effect from prefs
         !word gGlobalPrefsStore
         !word kNextFX
         bcs   @nofx
         +STAY @fx
         jsr   okvs_get
         !word gFXStore
@fx      !word $FDFD                 ; SMC
         bcc   +
@nofx    ldx   #0
+        stx   gFXIndex

         jsr   okvs_nth              ; get filename of transition effect code
         !word gFXStore
gFXIndex
         !byte 0
         +STAY @fxkey

         inc   gFXIndex              ; increment transition effect index
         jsr   okvs_len
         !word gFXStore
         cmp   gFXIndex
         bne   +
         lda   #0
         sta   gFXIndex
+
         lda   gFXIndex
         sta   @nexti
         jsr   okvs_nth              ; get name of next HGR transition
         !word gFXStore
@nexti   !byte $FD                   ; SMC
         +STAY @nextfx

         jsr   okvs_update           ; save name of next HGR transition in prefs store
         !word gGlobalPrefsStore
         !word kNextFX
@nextfx  !word $FDFD                 ; SMC

         jsr   SaveGlobalPreferences ; write prefs store to disk

         ; load transition effect code at $6000
         +LOAD_FILE kFXDirectory, @fxkey
         rts
@fxkey   !word $FDFD
kFXConfFile
         !byte @kFXConfFile_e-*-1
         !text "FX.CONF"
@kFXConfFile_e

}
